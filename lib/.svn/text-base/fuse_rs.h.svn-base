/*
*============================================================================================
*
*	Filename:fuse_rs.h
*	Description:req definition between request and socket
*	Create:09/23/2011
*

**/

#ifndef __FUSE_RS_H_
#define __FUSE_RS_H_

#ifdef __cplusplus
extern "C"
{
#endif 

#include "list.h"
#include <stdint.h>

//all login related information
enum request_type 
  {
    LOGIN = 0,
    LOGOUT,
    LOOKUP_FILE,
    LOOKUP_DIR,
    MK_DIR,
    MK_FILE,
    MOVE_DIR,
    MOVE_FILE,
    DELETE_FILE,
    DELETE_DIR,
    READ_FILE,
    READ_DIR,
    WRITE_FILE,
    UPLOAD_FILE,
    DOWNLOAD_FILE,
    REPORT_ERROR,
    FATAL_ERROR
  };
  
enum request_state 
  {
    REQ_SENT =0,
    REQ_RUNNING,
    REQ_FINISH
    
  };

  
struct request_in {
  void *data;
  uint32_t size;
};

struct request_out {
  void *data;
  uint32_t size;

};

struct request_arg {
  struct request_in in;
  struct request_out out;
};

struct readdir_in {
    uint64_t ino;//parent ino
    char path[0];//dir path
};

struct mkdir_in {
    uint64_t ino;//parent ino
    char path[0];//file path
};

struct rm_in {
    uint64_t ino;//parent ino
    int type;//0:regular file,1:directory
    char path[0];//file cloud path
};

#define DOWNLOAD  (1<<0)

struct meta_in {
    uint64_t ino;//node ino
    int type;//0:regular file ,1:directory
//    int flag;//do you want to download the file(1),or just lookup(0)
    char path[0];//file cloud path
};
struct file_meta_out {
    uint64_t ino;//file ino (== struct meta_in ino field)
    uint64_t size;//file size
//    int flag;//0,not download,1,download the file
    char *index;//file index
    char *md5;//file check sum
};
struct download_in {
    uint64_t ino;//file ino you want to download
    char *index;//file index ........
    char *path;//local file path you want to save
    char *md5;//file check sum you want to download
};

struct rename_in {
    int type;//0:regular file,1:directory
    char *old;
    char *nnew;
};

struct login_in {
  char *name;
  char *pwd;
};

struct upload_file_in {
    uint64_t ino;
    char *local_path;
    char *cloud_path;
};
  
struct request_req;

struct request_lowlevel_ops {
  void (*func)(struct request_req *,void *data);
  const char *name;
};

struct fuse_sock;

struct request_req {
  uint64_t unique;
  enum request_type type;
  enum request_state state;
  void *module;//belong to which module
  int32_t ctr;
  struct list list;//link to all request req
  struct list req_list;//all related fuse req
  struct request_arg arg;//all request argument
  struct fuse_sock *next;
  int error;
  //  struct request_lowlevel_op *op;
};


void request_free_req(struct request_req *);
int request_allocate_req(struct fuse_sock *next,enum request_type type,void *owner,struct request_req **_req);
uint64_t get_unique();
void rs_send(struct fuse_sock *next,struct request_req *req);  

#ifdef __cplusplus
}
#endif

#endif
